package UI;

import logic.Profile;

import javax.swing.*;
import javax.swing.border.TitledBorder;
import javax.swing.plaf.FontUIResource;
import javax.swing.text.StyleContext;
import java.awt.*;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.util.ArrayList;
import java.util.Locale;

public class ProfilesLoginFrame extends JFrame {
    JFrame thisFrame = this;
    private CardLayout layout = new CardLayout();
    private JFrame previousFrame;
    private JPanel panel1;
    private JButton backButton;
    private JButton previousProfileButton;
    private JButton selectProfileButton;
    private JButton nextProfileButton;
    private JPanel cardsPanel;
    private JPanel selectProfilePanel;
    private JPanel commandsPanel;

    public ProfilesLoginFrame(JFrame previousFrame, ArrayList<Profile> profiles) {
        this.previousFrame = previousFrame;
        cardsPanel.setLayout(layout);
        for (Profile p : profiles) {
            JPanel cardPanel = new JPanel();
            cardPanel.setAlignmentY(CENTER_ALIGNMENT);
            cardPanel.setLayout(new BoxLayout(cardPanel, BoxLayout.Y_AXIS));

            JLabel iconLabel = new JLabel(new ImageIcon("src/UI/ProfileIcon.png"));
            iconLabel.setAlignmentX(CENTER_ALIGNMENT);
            iconLabel.setAlignmentY(CENTER_ALIGNMENT);
            cardPanel.add(iconLabel);

            // Add profile name
            JLabel nameLabel = new JLabel("Name: " + p.getName());
            nameLabel.setAlignmentX(CENTER_ALIGNMENT);
            nameLabel.setAlignmentY(CENTER_ALIGNMENT);
            cardPanel.add(nameLabel);

            // Add profile type
            JLabel typeLabel = new JLabel();
            typeLabel.setAlignmentX(CENTER_ALIGNMENT);
            typeLabel.setAlignmentY(CENTER_ALIGNMENT);
            cardPanel.add(typeLabel);

            JLabel locationLabel = new JLabel("Location: " + p.getLocation());
            locationLabel.setAlignmentX(CENTER_ALIGNMENT);
            locationLabel.setAlignmentY(CENTER_ALIGNMENT);
            cardPanel.add(locationLabel);

            // Add card to cards panel
            cardsPanel.add(cardPanel);
        }
        setUpControls();
        setUpFrame();
        add(panel1);
    }

    private void setUpFrame() {
        setTitle("Pick a Profile to log in to");
        setLocationRelativeTo(null);
        setDefaultCloseOperation(EXIT_ON_CLOSE);
        setSize(500, 400);
        setResizable(false);
    }

    private void setUpControls() {
        nextProfileButton.addActionListener(new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent e) {
                layout.next(cardsPanel);
            }
        });

        previousProfileButton.addActionListener(new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent e) {
                layout.previous(cardsPanel);
            }
        });

        selectProfileButton.addActionListener(new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent e) {
                Component c = cardsPanel.getComponent(cardsPanel.getComponentCount() - 1);
                //c.get
                //addAuthentificationFields();
                //TODO how do i get the profile that is selected
                // DashboardFrame dash = new DashboardFrame(thisFrame);
                Dashboard dash = new Dashboard(null);
                dash.setLocationRelativeTo(null);
                dash.setVisible(true);
                dispose();

            }
        });
    }

    private void addAuthentificationFields() {
        // Create panel for username and password fields
        JPanel usernamePasswordPanel = new JPanel(new GridLayout(2, 2));

        // Add username label and field
        JLabel usernameLabel = new JLabel("Username:");
        JTextField usernameField = new JTextField();
        usernamePasswordPanel.add(usernameLabel);
        usernamePasswordPanel.add(usernameField);

        // Add password label and field
        JLabel passwordLabel = new JLabel("Password:");
        JPasswordField passwordField = new JPasswordField();
        usernamePasswordPanel.add(passwordLabel);
        usernamePasswordPanel.add(passwordField);

        // Add username and password panel to the card panel
        cardsPanel.add(usernamePasswordPanel, "UsernamePassword");

        // Show the added panel
        layout.show(cardsPanel, "UsernamePassword");

        // Repaint the frame
        revalidate();
        repaint();
        pack();
    }


    {
// GUI initializer generated by IntelliJ IDEA GUI Designer
// >>> IMPORTANT!! <<<
// DO NOT EDIT OR ADD ANY CODE HERE!
        $$$setupUI$$$();
    }

    /**
     * Method generated by IntelliJ IDEA GUI Designer
     * >>> IMPORTANT!! <<<
     * DO NOT edit this method OR call it in your code!
     *
     * @noinspection ALL
     */
    private void $$$setupUI$$$() {
        panel1 = new JPanel();
        panel1.setLayout(new BorderLayout(0, 0));
        panel1.setBackground(new Color(-4931890));
        final JPanel panel2 = new JPanel();
        panel2.setLayout(new com.intellij.uiDesigner.core.GridLayoutManager(2, 1, new Insets(0, 0, 0, 0), -1, -1));
        panel2.setOpaque(false);
        panel1.add(panel2, BorderLayout.WEST);
        backButton = new JButton();
        backButton.setOpaque(false);
        backButton.setText("<-- Back");
        panel2.add(backButton, new com.intellij.uiDesigner.core.GridConstraints(1, 0, 1, 1, com.intellij.uiDesigner.core.GridConstraints.ANCHOR_CENTER, com.intellij.uiDesigner.core.GridConstraints.FILL_HORIZONTAL, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_CAN_SHRINK | com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_CAN_GROW, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        final com.intellij.uiDesigner.core.Spacer spacer1 = new com.intellij.uiDesigner.core.Spacer();
        panel2.add(spacer1, new com.intellij.uiDesigner.core.GridConstraints(0, 0, 1, 1, com.intellij.uiDesigner.core.GridConstraints.ANCHOR_CENTER, com.intellij.uiDesigner.core.GridConstraints.FILL_VERTICAL, 1, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_WANT_GROW, null, null, null, 0, false));
        selectProfilePanel = new JPanel();
        selectProfilePanel.setLayout(new BorderLayout(0, 0));
        selectProfilePanel.setOpaque(false);
        panel1.add(selectProfilePanel, BorderLayout.CENTER);
        commandsPanel = new JPanel();
        commandsPanel.setLayout(new FlowLayout(FlowLayout.CENTER, 20, 5));
        commandsPanel.setOpaque(false);
        selectProfilePanel.add(commandsPanel, BorderLayout.SOUTH);
        commandsPanel.setBorder(BorderFactory.createTitledBorder(BorderFactory.createLoweredBevelBorder(), null, TitledBorder.DEFAULT_JUSTIFICATION, TitledBorder.DEFAULT_POSITION, this.$$$getFont$$$(null, -1, -1, commandsPanel.getFont()), null));
        previousProfileButton = new JButton();
        previousProfileButton.setOpaque(false);
        previousProfileButton.setText("Previous");
        commandsPanel.add(previousProfileButton);
        selectProfileButton = new JButton();
        selectProfileButton.setOpaque(false);
        selectProfileButton.setRequestFocusEnabled(true);
        selectProfileButton.setText("select");
        commandsPanel.add(selectProfileButton);
        nextProfileButton = new JButton();
        nextProfileButton.setOpaque(false);
        nextProfileButton.setRequestFocusEnabled(true);
        nextProfileButton.setText("Next");
        commandsPanel.add(nextProfileButton);
        cardsPanel = new JPanel();
        cardsPanel.setLayout(new BorderLayout(0, 0));
        cardsPanel.setOpaque(false);
        selectProfilePanel.add(cardsPanel, BorderLayout.CENTER);
        cardsPanel.setBorder(BorderFactory.createTitledBorder(BorderFactory.createLoweredBevelBorder(), null, TitledBorder.DEFAULT_JUSTIFICATION, TitledBorder.DEFAULT_POSITION, null, null));
    }

    /**
     * @noinspection ALL
     */
    private Font $$$getFont$$$(String fontName, int style, int size, Font currentFont) {
        if (currentFont == null) return null;
        String resultName;
        if (fontName == null) {
            resultName = currentFont.getName();
        } else {
            Font testFont = new Font(fontName, Font.PLAIN, 10);
            if (testFont.canDisplay('a') && testFont.canDisplay('1')) {
                resultName = fontName;
            } else {
                resultName = currentFont.getName();
            }
        }
        Font font = new Font(resultName, style >= 0 ? style : currentFont.getStyle(), size >= 0 ? size : currentFont.getSize());
        boolean isMac = System.getProperty("os.name", "").toLowerCase(Locale.ENGLISH).startsWith("mac");
        Font fontWithFallback = isMac ? new Font(font.getFamily(), font.getStyle(), font.getSize()) : new StyleContext().getFont(font.getFamily(), font.getStyle(), font.getSize());
        return fontWithFallback instanceof FontUIResource ? fontWithFallback : new FontUIResource(fontWithFallback);
    }

    /**
     * @noinspection ALL
     */
    public JComponent $$$getRootComponent$$$() {
        return panel1;
    }
}
