package UI;

import javax.swing.*;
import javax.swing.plaf.FontUIResource;
import javax.swing.text.StyleContext;

import controller.Controller;

import java.awt.*;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.io.FileNotFoundException;
import java.util.Locale;

public class firstFrame extends JFrame {
    private Controller controller = new Controller();
    private JFrame thisFrame;
    private LogInOrCreateFrame accountSelection;

    private JPanel mainPanel;

    private JLabel titleLabel;
    private JLabel layoutFileLabel;
    private JTextField layoutFileName;

    public firstFrame() {
        thisFrame = this;
        setContentPane(mainPanel);
        setTitle("Testing Swing UI Builder");
        getContentPane().setFont(new Font(Font.MONOSPACED, Font.BOLD, 20));
        setDefaultCloseOperation(EXIT_ON_CLOSE);
        setSize(600, 600);
        setLocationRelativeTo(null);
        setVisible(true);
        setResizable(false);

        layoutFileName.addActionListener(new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent e) {
                System.out.println("enter key was pressed");
                //TODO: can this be done using command pattern?
                try {
                    System.out.println(layoutFileName.getText());
                    controller.layoutSetUp(layoutFileName.getText());


                } catch (FileNotFoundException ex) {
                    throw new RuntimeException(ex);
                }

                LogInOrCreateFrame secondFrame = new LogInOrCreateFrame(thisFrame);
                secondFrame.setVisible(true);
                dispose();

//                setVisible(false);
//                //Font font = new Font();
//                accountSelection = new selectAccountGUI(mainPanel);
//                setContentPane(accountSelection.accountCreateForm);
//                //setSize(600,400);
//                setResizable(true);
//                setVisible(true);
////                setContentPane(dash.dashboard);
////                setSize(1400,900);
////                setResizable(true);
////                setVisible(true);
            }
        });
    }

    public static void main(String[] args) {
        new firstFrame();


    }


    {
// GUI initializer generated by IntelliJ IDEA GUI Designer
// >>> IMPORTANT!! <<<
// DO NOT EDIT OR ADD ANY CODE HERE!
        $$$setupUI$$$();
    }

    /**
     * Method generated by IntelliJ IDEA GUI Designer
     * >>> IMPORTANT!! <<<
     * DO NOT edit this method OR call it in your code!
     *
     * @noinspection ALL
     */
    private void $$$setupUI$$$() {
        mainPanel = new JPanel();
        mainPanel.setLayout(new GridBagLayout());
        mainPanel.setBackground(new Color(-4931890));
        titleLabel = new JLabel();
        Font titleLabelFont = this.$$$getFont$$$("Baghdad", Font.BOLD, 48, titleLabel.getFont());
        if (titleLabelFont != null) titleLabel.setFont(titleLabelFont);
        titleLabel.setForeground(new Color(-16777216));
        titleLabel.setText("Smart Home Simulator ");
        GridBagConstraints gbc;
        gbc = new GridBagConstraints();
        gbc.gridx = 0;
        gbc.gridy = 2;
        gbc.gridwidth = 2;
        mainPanel.add(titleLabel, gbc);
        layoutFileLabel = new JLabel();
        layoutFileLabel.setEnabled(true);
        Font layoutFileLabelFont = this.$$$getFont$$$(null, Font.BOLD, -1, layoutFileLabel.getFont());
        if (layoutFileLabelFont != null) layoutFileLabel.setFont(layoutFileLabelFont);
        layoutFileLabel.setForeground(new Color(-16777216));
        layoutFileLabel.setText("Enter the layout file path to start:    ");
        gbc = new GridBagConstraints();
        gbc.gridx = 0;
        gbc.gridy = 3;
        gbc.anchor = GridBagConstraints.WEST;
        mainPanel.add(layoutFileLabel, gbc);
        layoutFileName = new JTextField();
        layoutFileName.setBackground(new Color(-4209982));
        layoutFileName.setForeground(new Color(-16777216));
        layoutFileName.setMinimumSize(new Dimension(60, 30));
        layoutFileName.setOpaque(false);
        layoutFileName.setText("");
        gbc = new GridBagConstraints();
        gbc.gridx = 1;
        gbc.gridy = 3;
        gbc.anchor = GridBagConstraints.WEST;
        gbc.fill = GridBagConstraints.HORIZONTAL;
        mainPanel.add(layoutFileName, gbc);
    }

    /**
     * @noinspection ALL
     */
    private Font $$$getFont$$$(String fontName, int style, int size, Font currentFont) {
        if (currentFont == null) return null;
        String resultName;
        if (fontName == null) {
            resultName = currentFont.getName();
        } else {
            Font testFont = new Font(fontName, Font.PLAIN, 10);
            if (testFont.canDisplay('a') && testFont.canDisplay('1')) {
                resultName = fontName;
            } else {
                resultName = currentFont.getName();
            }
        }
        Font font = new Font(resultName, style >= 0 ? style : currentFont.getStyle(), size >= 0 ? size : currentFont.getSize());
        boolean isMac = System.getProperty("os.name", "").toLowerCase(Locale.ENGLISH).startsWith("mac");
        Font fontWithFallback = isMac ? new Font(font.getFamily(), font.getStyle(), font.getSize()) : new StyleContext().getFont(font.getFamily(), font.getStyle(), font.getSize());
        return fontWithFallback instanceof FontUIResource ? fontWithFallback : new FontUIResource(fontWithFallback);
    }

    /**
     * @noinspection ALL
     */
    public JComponent $$$getRootComponent$$$() {
        return mainPanel;
    }
}
